// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  name                  String?
  phone                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  quotes                Quote[]
  whatsappConversations WhatsAppConversation[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  slug        String    @unique
  imageUrl    String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal?
  imageUrl    String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  basePrice   Decimal?
  imageUrl    String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quotes      QuoteService[]
}

model Quote {
  id          Int      @id @default(autoincrement())
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  name        String
  email       String
  phone       String?
  address     String?
  description String?
  status      QuoteStatus @default(PENDING)
  totalAmount Decimal?
  services    QuoteService[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuoteService {
  id        Int     @id @default(autoincrement())
  quoteId   Int
  quote     Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])
  quantity  Int     @default(1)
  price     Decimal?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  imageUrls   String[]
  location    String?
  completedAt DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum QuoteStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
  COMPLETED
}

model WhatsAppConversation {
  id            String             @id @default(cuid())
  phoneNumber   String             @unique
  customerName  String?
  lastMessageAt DateTime
  status        ConversationStatus @default(ACTIVE)
  userId        Int?
  user          User?              @relation(fields: [userId], references: [id])
  messages      WhatsAppMessage[]
  state         ChatbotState?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model WhatsAppMessage {
  id             String               @id @default(cuid())
  conversationId String
  conversation   WhatsAppConversation @relation(fields: [conversationId], references: [id])
  messageId      String               @unique
  direction      MessageDirection
  content        String
  mediaUrl       String?
  mediaType      String?
  status         String?
  createdAt      DateTime             @default(now())
}

model ChatbotState {
  id             String               @id @default(cuid())
  conversationId String               @unique
  conversation   WhatsAppConversation @relation(fields: [conversationId], references: [id])
  currentStep    String
  collectedData  Json
  updatedAt      DateTime             @updatedAt
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  HANDED_OFF
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

model UserSession {
  id          String         @id @default(cuid())
  sessionId   String         @unique
  ipAddress   String?
  userAgent   String?
  referrer    String?
  landingPage String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  activities  UserActivity[]
  pageViews   PageView[]
}

model PageView {
  id        String      @id @default(cuid())
  sessionId String
  session   UserSession @relation(fields: [sessionId], references: [sessionId])
  page      String
  title     String?
  timeSpent Int?
  createdAt DateTime    @default(now())
}

model UserActivity {
  id          String      @id @default(cuid())
  sessionId   String
  session     UserSession @relation(fields: [sessionId], references: [sessionId])
  page        String
  elementId   String?
  elementText String?
  elementType String?
  createdAt   DateTime    @default(now())
}
